/* Media queries */
.responsive {
    height: 100px;
    background-color: aquamarine;
    width: 30%;
}

/* Tablet */
@media only screen and (max-width: 920px) {
    .responsive {
        width: 50%;
    }
}

/* podemos poner otra regla intermedia con otra
medida para posibles modificaciones de pantalla
como ésta */
/* @media only screen and (max-width: 920px) {
    .responsive {
        width: 50%;
    }
} */
/* Mobile: */
@media only screen and (min-width· 700px){
    .responsive {
        width: 100%;
    }
}

/* Flex-box */
.flex-parent {
    display: flex; /*siempre que esté este display sabemos que es el CONTENEDOR, pero afecta tanto a los padres como a los hijos*/
    /* flex-direction: row; /*row en default, es columna*/
    /* align-items: center; para que me alinee el texto */
    /* flex-wrap: wrap; NOWRAP (DEFAULT)REPASAR BIEN */ 
    /* flex-flow: row wrap; */

    /*ESTO ES PARA EL EJE PRINCIPAL:*/
    justify-content: center;
    justify-content: flex-start;
    justify-content: flex-end;

    justify-content: space-around;
    justify-content: space-between;/*esto hace que si tengo dos elementos, me hace el max espacio disponible entre los dos objetos*/
    justify-content: space-evenly;

    /*ESTO ES PARA EL EJE SECUNDARIO:*/
    align-items: center;
    align-items: flex-start;
    align-items: flex-end;
    align-items: stretch;
    align-items: baseline;

    border:2px solid black;
    height: 250px;



}
[class^="flex-child"] {
    width: 250px;
    height: 250px;

    display: flex;
    justify-content: center;
    align-items: center;
}
.flex-parent > div:nth-child(odd) {
    background-color: #ddd;
    color: #333;
}
.flex-parent > div:nth-child(even) {
    background-color: #333;
    color: #ddd;
}
/*gracias a poner ODD y EVEN se me alternan los coolores de las cajas y si añadiera dos más, se alternarían solas*/

.flex-child-1{ /*con esto vemos que el hijo1 tiene diferente altura que sus hermanos*/
    /* height: 200px; */
    flex-shrink: 2;
}
.flex-child-2{
    flex-shrink: 3;
    flex-grow: 1;
}
.flex-child-3{
    flex-shrink: 1;
    flex-basis: auto ;
}

/*CSS GRID básico con media queries*/
[class^="grid-child"]{
    background-color: red;
    display: flex;
    justify-content: center;
    align-items: center;
}
.grid-parent{
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;/*la columna del medio será el doble que la 1 y 3 (la 2fr)*/
    grid-template-rows: 1fr 2fr; /*como solo hay dos filas que han salido automaticas porque 6 cajas no le caben en 3 filas y él solo ha formado dos filas, pues aqui les doy tamaño*/
    /*si hubiera copiado 4 veces esas 6 filas y quiero darle el mismo tamaño por bloques de 6, hago: "grid-template-rows: repeat(4, 1fr 2fr)" y tambien se les puedes dar tamaño en px pero se usa menos*/
    gap: 10px;
}
/* vamos a hacer que a partir de un punto sea responsive*/
 @media only screen and (max-width:920px){
    .grid-parent{
        grid-template-columns: 1fr 2fr;
    }
}
@media only screen and (max-width:768px){
    .grid-parent{
        grid-template-columns: 1fr;
    }
}
/*INSERTAMOS OTRO EJEMPLO AQUÍ PARA EXPLICARNOS OTRA COSA, para verlo tenemos que comentar las medias queries que tenemos debajo de esto:*/
.grid-parent0{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    grid-template-rows: 1fr 2fr; 
    gap: 10px;
    /*con el auto-fit me va cuadrando las cajas según amplío la ventana al máximo del tamaño definido*/



/*CSS GRID por líneas*/
.grid-parent-2{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);
    gap: 10px

}
.grid-parent-2 > .grid-child-1 { /*esto significa el grid child 1 que esta dentro del grid-parent2, y vamos a darles características a todos los hijos*/
    grid-column: 1 / 3; /*de la linea 1 a la 3*/
    grid-row: 1 ; /*equivalente a grid-row: 1 / 2 */
}

.grid-parent-2 > .grid-child-2 {
    grid-column: 3;
    grid-row: 1 /3;
}

.grid-parent-2 > .grid-child-3 {
    grid-column: 1 / 3;
    grid-row: 2 /5;
    opacity: 0.5;
    z-index: -1;/*es el indice que me controla el eje Z que es lo que está mas hacia dentro o más hacia fuera de la pantalla, AQUÍ TIENE OPACIDAD PERO CON EL -1 LE DIGO QU ELO QUE QUIERO ES QUE ESTÉ POR DETRAS*/
}
.grid-parent-2 > .grid-child-4 {
    grid-column:  3;
    grid-row: 3;
}
.grid-parent-2 > .grid-child-5 {
    grid-column: 2 / 4;
    grid-row: 4 / 5;
}
.grid-parent-2 > .grid-child-6 {
    grid-column: 1;
    grid-row: 2;
}
/*CSS GRID por áreas*/
.grid-parent-3 {
    display: grid;
    gap: 10px;


    grid-template-columns: 150px 1fr 1fr; /*al box2 le hemos dado tamaño fijo, agrande lo que agrande la pagina*/
    grid-template-rows: 1fr 4fr 1fr;
    grid-template-areas: ". nav nav" /*esto es para darle a las 3 columnas que sean como una cabcera toda entera, estoy dibujando la fila*/
    /*en este caso el PUNTO (.) es para decirle que en esa columna no ocupe nada y vemos como lo deja en blanco*/
                         "content1 content2 content3" /*esto es para que sean 3 bloques, por eso a cada uno le doy un número ya que después iré a cada uno y le daré un área concreta*/
                         "footer footer footer"/*para lo mismo que en nav, me salga un bloque completo, porque no he diferenciado de número como en content*/

}
.grid-parent-3 > .grid-child-1 {
    grid-area: nav;/*importante recordar que aquí es SIN COMILLAS*/
}
.grid-parent-3 > .grid-child-2 {
    grid-area: content1;/*importante recordar que aquí es SIN COMILLAS*/
}
.grid-parent-3 > .grid-child-3 {
    grid-area: content2;/*importante recordar que aquí es SIN COMILLAS*/
}
.grid-parent-3 > .grid-child-4 {
    grid-area: content3;/*importante recordar que aquí es SIN COMILLAS*/
}
.grid-parent-3 > .grid-child-5 {
    grid-area: footer;/*importante recordar que aquí es SIN COMILLAS*/
}